create or replace function INSERT_INTO_USER_PERMISSION()
	returns integer as
$BODY$

declare
	ADMINISTRATING_ID$ INTEGER;
	ADMINISTRATING_PRODUCTS_ID$ INTEGER;
	ADMINISTRATING_PRODUCTS_VIEW_ID$ INTEGER;
	ADMINISTRATING_PRODUCTS_EDIT_ID$ INTEGER;
	ADMINISTRATOR_ID$ INTEGER;
begin
	set SEARCH_PATH to CARABI_KERNEL;
	ADMINISTRATING_ID$:= 1;
	ADMINISTRATOR_ID$ := 1;
	insert into USER_PERMISSION(PERMISSION_ID, NAME, SYSNAME, DESCRIPTION, PARENT_PERMISSION)
	values(DEFAULT, 'Управление всеми программными продуктами', 'ADMINISTRATING-PRODUCTS', 'Доступ к любым программным продуктам', ADMINISTRATING_ID$)
	returning PERMISSION_ID into ADMINISTRATING_PRODUCTS_ID$;

	insert into USER_PERMISSION(PERMISSION_ID, NAME, SYSNAME, DESCRIPTION, PARENT_PERMISSION)
	values(DEFAULT, 'Просмотр всех программных продуктов', 'ADMINISTRATING-PRODUCTS-VIEW', 'Просматривать программные продукты, доступные кому угодно', ADMINISTRATING_PRODUCTS_ID$)
	returning PERMISSION_ID into ADMINISTRATING_PRODUCTS_VIEW_ID$;

	insert into USER_PERMISSION(PERMISSION_ID, NAME, SYSNAME, DESCRIPTION, PARENT_PERMISSION)
	values(DEFAULT, 'Редактирование всех программных продуктов', 'ADMINISTRATING-PRODUCTS-EDIT', 'Создавать, удалять и редактировать программные продукты, доступные кому угодно', ADMINISTRATING_PRODUCTS_ID$)
	returning PERMISSION_ID into ADMINISTRATING_PRODUCTS_EDIT_ID$;

	insert into ROLE_HAS_PERMISSION(role_id, permission_id) values(ADMINISTRATOR_ID$, ADMINISTRATING_PRODUCTS_ID$);
	insert into ROLE_HAS_PERMISSION(role_id, permission_id) values(ADMINISTRATOR_ID$, ADMINISTRATING_PRODUCTS_VIEW_ID$);
	insert into ROLE_HAS_PERMISSION(role_id, permission_id) values(ADMINISTRATOR_ID$, ADMINISTRATING_PRODUCTS_EDIT_ID$);
	return 0;
end;
$BODY$
	LANGUAGE PLPGSQL VOLATILE;


SELECT INSERT_INTO_USER_PERMISSION();

set SEARCH_PATH to DEFAULT;

DROP FUNCTION INSERT_INTO_USER_PERMISSION();

